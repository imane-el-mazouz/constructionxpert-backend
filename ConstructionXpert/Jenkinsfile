pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        DOCKER_IMAGE = 'imane1233333333333333/construction'
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        SONARQUBE = 'SonarQube Server'
        SONARQUBE_TOKEN = credentials('squ_4bb2d39e989393f7b1b90a43b4eb78ed1c83c188')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/imane-el-mazouz/constructionxpert-backend.git'
            }
        }

        stage('Build and Test') {
            steps {
                dir('ConstructionXpert') {
                    bat 'mvn clean install'
                    bat 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('ConstructionXpert') {
                    withSonarQubeEnv(SONARQUBE) {
                        bat "mvn sonar:sonar -Dsonar.token=${SONARQUBE_TOKEN}"
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def SERVICES = ['eureka-server', 'gateway-service', 'project-service', 'resource-service', 'task-service', 'user-service']
                    def imageTag = "${env.BUILD_NUMBER}"
                    for (service in SERVICES) {
                        bat "docker build -t ${DOCKER_IMAGE}/${service}:${imageTag} ./${service}"
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    def SERVICES = ['eureka-server', 'gateway-service', 'project-service', 'resource-service', 'task-service', 'user-service']
                    def imageTag = "${env.BUILD_NUMBER}"
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat 'echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin'
                        for (service in SERVICES) {
                            bat "docker push ${DOCKER_IMAGE}/${service}:${imageTag}"
                        }
                    }
                }
            }
        }

        stage('Tag and Push Docker Images') {
            steps {
                script {
                    def SERVICES = ['eureka-server', 'gateway-service', 'project-service', 'resource-service', 'task-service', 'user-service']
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        SERVICES.each { service ->
                            def imageName = "${DOCKER_IMAGE}/${service}"
                            bat """
                                docker tag ${DOCKER_IMAGE}/${service}:${env.BUILD_NUMBER} ${imageName}:latest
                                docker push ${imageName}:latest
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            junit '**/target/surefire-reports/*.xml'
        }
    }
}
